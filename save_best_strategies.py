#!/usr/bin/env python
"""
Save Best Trading Strategies

This script analyzes all competition checkpoint files and saves the best performing
strategies based on a combined performance score.
"""
import os
import json
import glob
import pandas as pd
from pathlib import Path

# Define paths
BASE_DIR = Path('.')
COMPETITION_DIR = BASE_DIR / 'competition'
CHECKPOINTS_DIR = COMPETITION_DIR / 'checkpoints'
OUTPUT_DIR = BASE_DIR / 'optimized_parameters'

# Create output directory if it doesn't exist
OUTPUT_DIR.mkdir(exist_ok=True)

def calculate_score(metrics):
    """Calculate a combined performance score based on various metrics"""
    win_rate = metrics.get('win_rate', 0)
    annual_return = metrics.get('annual_return', 0)
    max_drawdown = metrics.get('max_drawdown', 100)  # Lower is better
    profit_factor = metrics.get('profit_factor', 0)
    sharpe_ratio = metrics.get('sharpe_ratio', 0)
    
    # Score calculation (custom weights for each metric)
    score = (
        0.2 * win_rate + 
        0.3 * annual_return + 
        0.2 * (100 - max_drawdown) / 10 +  # Convert to positive score
        0.15 * profit_factor * 10 +        # Scale up for weighting
        0.15 * (sharpe_ratio + 2) * 10     # Offset negative values
    )
    
    return score

def find_best_strategies():
    """Find the best performing ML and Medallion strategies from checkpoint files"""
    # Get all checkpoint files
    ml_files = glob.glob(str(CHECKPOINTS_DIR / "ml_round_*.json"))
    medallion_files = glob.glob(str(CHECKPOINTS_DIR / "medallion_round_*.json"))
    
    # Initialize best strategies
    best_ml = {'score': -float('inf'), 'data': None}
    best_medallion = {'score': -float('inf'), 'data': None}
    
    # Process ML checkpoints
    print(f"Processing {len(ml_files)} ML strategy checkpoints...")
    for file_path in ml_files:
        try:
            with open(file_path, 'r') as f:
                data = json.load(f)
            
            if 'metrics' in data:
                score = calculate_score(data['metrics'])
                if score > best_ml['score']:
                    best_ml['score'] = score
                    best_ml['data'] = data
        except Exception as e:
            print(f"Error processing {file_path}: {e}")
    
    # Process Medallion checkpoints
    print(f"Processing {len(medallion_files)} Medallion strategy checkpoints...")
    for file_path in medallion_files:
        try:
            with open(file_path, 'r') as f:
                data = json.load(f)
            
            if 'metrics' in data:
                score = calculate_score(data['metrics'])
                if score > best_medallion['score']:
                    best_medallion['score'] = score
                    best_medallion['data'] = data
        except Exception as e:
            print(f"Error processing {file_path}: {e}")
    
    return best_ml, best_medallion

def save_strategies(best_ml, best_medallion):
    """Save the best strategies to JSON files"""
    if best_ml['data']:
        print("\nBest ML Strategy:")
        print(f"Round: {best_ml['data'].get('round')}")
        print(f"Parameters: {best_ml['data'].get('parameters')}")
        print(f"Metrics: {best_ml['data'].get('metrics')}")
        print(f"Score: {best_ml['score']:.2f}")
        
        # Save ML parameters
        ml_params = best_ml['data'].get('parameters', {})
        ml_params['metrics'] = best_ml['data'].get('metrics', {})
        with open(OUTPUT_DIR / 'ml_strategy_optimized.json', 'w') as f:
            json.dump(ml_params, f, indent=2)
    
    if best_medallion['data']:
        print("\nBest Medallion Strategy:")
        print(f"Round: {best_medallion['data'].get('round')}")
        print(f"Parameters: {best_medallion['data'].get('parameters')}")
        print(f"Metrics: {best_medallion['data'].get('metrics')}")
        print(f"Score: {best_medallion['score']:.2f}")
        
        # Save Medallion parameters
        medallion_params = best_medallion['data'].get('parameters', {})
        medallion_params['metrics'] = best_medallion['data'].get('metrics', {})
        with open(OUTPUT_DIR / 'medallion_strategy_optimized.json', 'w') as f:
            json.dump(medallion_params, f, indent=2)
    
    print("\nOptimized parameters saved to:", OUTPUT_DIR)

def update_mt5_ea_parameters():
    """Generate MT5 EA initialization code with optimized parameters"""
    ml_file = OUTPUT_DIR / 'ml_strategy_optimized.json'
    medallion_file = OUTPUT_DIR / 'medallion_strategy_optimized.json'
    
    if ml_file.exists():
        with open(ml_file, 'r') as f:
            ml_params = json.load(f)
        
        # Generate ML EA parameter setup
        ml_code = "// ML Strategy EA Optimized Parameters\n"
        ml_code += "// Generated by parameter optimizer\n\n"
        ml_code += "input int Lookback_Periods = {};\n".format(ml_params.get('lookback_periods', 44))
        ml_code += "input int Prediction_Horizon = {};\n".format(ml_params.get('prediction_horizon', 5))
        ml_code += "input string Model_Type = \"{}\";\n".format(ml_params.get('model_type', 'xgboost'))
        ml_code += "input string Feature_Selection = \"{}\";\n".format(ml_params.get('feature_selection', 'pca'))
        ml_code += "input double StopLoss_Pct = {:.2f};\n".format(ml_params.get('stop_loss_pct', 2.95))
        ml_code += "input double TakeProfit_Pct = {:.2f};\n".format(ml_params.get('take_profit_pct', 1.46))
        ml_code += "input double RiskPerTrade_Pct = {:.2f};\n".format(ml_params.get('risk_per_trade_pct', 1.13))
        ml_code += "input double Confidence_Threshold = {:.2f};\n".format(ml_params.get('confidence_threshold', 0.57))
        
        with open(OUTPUT_DIR / 'ml_ea_parameters.txt', 'w') as f:
            f.write(ml_code)
    
    if medallion_file.exists():
        with open(medallion_file, 'r') as f:
            medallion_params = json.load(f)
        
        # Generate Medallion EA parameter setup
        medallion_code = "// Medallion Strategy EA Optimized Parameters\n"
        medallion_code += "// Generated by parameter optimizer\n\n"
        medallion_code += "input int FastMA_Periods = {};\n".format(medallion_params.get('fast_ma_periods', 26))
        medallion_code += "input int SlowMA_Periods = {};\n".format(medallion_params.get('slow_ma_periods', 142))
        medallion_code += "input int RSI_Periods = {};\n".format(medallion_params.get('rsi_periods', 14))
        medallion_code += "input int RSI_Overbought = {};\n".format(medallion_params.get('rsi_overbought', 79))
        medallion_code += "input int RSI_Oversold = {};\n".format(medallion_params.get('rsi_oversold', 31))
        medallion_code += "input double Volatility_Factor = {:.4f};\n".format(medallion_params.get('volatility_factor', 1.7099))
        medallion_code += "input double StopLoss_Pct = {:.2f};\n".format(medallion_params.get('stop_loss_pct', 0.74))
        medallion_code += "input double TakeProfit_Pct = {:.2f};\n".format(medallion_params.get('take_profit_pct', 2.33))
        medallion_code += "input double RiskPerTrade_Pct = {:.2f};\n".format(medallion_params.get('risk_per_trade_pct', 1.0))
        
        with open(OUTPUT_DIR / 'medallion_ea_parameters.txt', 'w') as f:
            f.write(medallion_code)

if __name__ == '__main__':
    print("Finding the best trading strategies from competition checkpoints...")
    best_ml, best_medallion = find_best_strategies()
    save_strategies(best_ml, best_medallion)
    update_mt5_ea_parameters()
    print("\nComplete! The best strategies have been saved and are ready for deployment.") 